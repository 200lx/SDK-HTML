<HTML>
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>LHAPIBLOCK - Application Window Management Structure </TITLE></HEAD>
<BODY>
<H3>LHAPIBLOCK - Application Window Management Structure </H3><P>
Each application must define one LHAPIBLOCK with which LHAPI keeps track of that application's windowing.  LHAPI is notified of the block's location during application initialization, and after context switching back to the application.  <P>
The application itself should not modify or peek into the structure of the LHAPIBLOCK, as the LHAPIBLOCK structure is subject to change.  If the application needs information, it should get it through calls to LHAPI functions.  <P>
<UL><LI><B>FirstWnd:</B> This gives the first window in the LHAPI window list.  LHAPI can traverse all windows by starting at FirstWnd, and following the window's NextWnd pointer.  If a window's NextWnd pointer is NULL, the end of the list has been reached.  </LI><P>
<LI><B>LastWnd:</B> This gives the last window in the window list.  If windows are added to the screen, they are chained on to this LastWnd.  </LI><P>
<LI><B>FocusWnd:</B> FocusWnd is the window that has focus, i.e.  will get user keystrokes.  </LI><P>
<LI><B>BeginHighlight:</B> BeginHighlight points to the beginning of the highlighted (user-selected) area to be cut/copied/pasted/overwritten/deleted.  This may mean different things to different window classes, but it is reset by LHAPI each time a different window receives the focus.  For edit windows, this is the offset into the edit data buffer of the first text character which is highlighted.  </LI><P>
<LI><B>EndHighlight:</B> Similar to BeginHighlight, EndHighlight indicates end of highlight.  For edit windows, this is the offset into the edit data buffer of the character immediately following the last text character which is highlighted.  Thus, the number of characters highlighted is (EndHighLight - BeginHighlight), with nothing highlighted if (EndHighLight = BeginHighlight).  </LI><P>
<LI><B>Status:</B> LHAPIBLOCK Status Field bit defintions are </LI><P>
<UL>
<B>STATUS_ALT_MENU </B><BR>
0x0001 If this bit is set, the next &lt;Alt&gt; key release will cause the top menubar to be activated.  If this bit is clear, the next &lt;Alt&gt; release will be ignored.  <P>
<B>STATUS_ALT_PRESS </B><BR>
0x0002 This bit is the flag for last shift state of the &lt;Alt&gt; key: 0=Up, 1=Pressed.  <P>
This bit is set when the &lt;Alt&gt; key is pressed (make) and cleared when the &lt;Alt&gt; key is released (break).  <P>
<B>STATUS_SHIFT_PRESS </B><BR>
0x0004 This bit is the flag for last shift state of the &lt;Shift&gt; key: 0=Up, 1=Pressed.  <P>
This bit is set when a &lt;Shift&gt; key is pressed (make) and cleared when a &lt;Shift&gt; key is released (break).  Note that these values are set according to what the BIOS tells us.  If the BIOS implements a &quot;sticky&quot; key, we do not actually realize that the key has been released until the next key has been struck and the BIOS tells us then that the prior keys has been released.  <P>
<B>STATUS_CTRL_PRESS </B><BR>
0x0008 This bit is the flag for last shift state of the &lt;Ctrl&gt; key: 0=Up, 1=Pressed.  <P>
This bit is set when the &lt;Ctrl&gt; key is pressed (make) and cleared when the &lt;Ctrl&gt; key is released (break).  <P>
<B>STATUS_CAPSLOCK </B><BR>
0x0010 This bit is the flag for the current state of &lt;CapsLock&gt;: 0=Off, 1=On.  <P>
This bit is set when the CapsLock state toggles on, and cleared when the CapsLock state toggles off.  <P>
<B>STATUS_SCROLLLOCK </B><BR>
0x0020 This bit is the flag for the current state of &lt;ScrollLock&gt;: 0=Off, 1=On.  <P>
This bit is set when the ScrollLock state toggles on, and cleared when the ScrollLock state toggles off.  <P>
<B>STATUS_KEYPAD_PRESS </B><BR>
0x0040 This bit is the flag which is set when the user presses an &lt;Alt-UpArrow&gt; or an &lt;Alt-DownArrow&gt; keystroke in a ComboBox.  The subsequent &lt;Alt-NumberPad&gt; scan code which will be generated by the BIOS will then be ignored.  <P>
<B>STATUS_EDIT_UNDO </B><BR>
0x0080 This bit is the flag which signals whether or not the edit text has been modified since the edit window received the focus (1=modified; 0=unchanged).  If this bit is set, the next &lt;Esc&gt; key press will cause the original copy of the edit text to be restored from the save buffer.  <P>
<B>STATUS_SUBMENUS </B><BR>
0x8000 This bit is the set when the sub-menus below the top menubar items are displayed while the user navigates through the top menubar items.  This is needed when the menubar item selection is moved from an item that has a sub-menu to one that doesn't.  In this case, the appropriate sub-menu will automatically be activated by LHAPI when the top menubar selection returns to an item that has a sub-menu.  <P>
</UL></UL>
<UL><LI><B>UndoBuffer:</B> This buffer is used in a one-level undo of edit text.  A default UndoBuffer is allocated by LHAPI.  An application can define a larger buffer by allocating one itself and passing it to the SetUndoBuffer service.  </LI><P>
<LI><B>FkeyPtr:</B> This field points to current FKey structure so that the LHAPI can determine whether or not to redisplay the function keys.  </LI><P>
<LI><B>ScreenSave:</B> This is a far pointer to screen stack area, which is set by InitializeLHAPI.  The Screen stack is used by Object to save the contents of the screen underneath windows that employ STYLE_SAVEUNDER.  This buffer is allocated by LHAPI itself.  Once this pointer is initialized, it is never changed.  </LI><P>
<LI><B>ScreenSaveStart:</B> ScreenSaveStart is the offset into the ScreenSave buffer of the next available memory.  It is used by Object to maintain the Screen stack for windows that employ STYLE_SAVEUNDER.  This index is updated every time a screen is saved or restored.  </LI><P>
<LI><B>ScreenSaveEnd:</B> Total size, in bytes, of the ScreenSave buffer.  It is used by Object to maintain the screen stack for windows that employ STYLE_SAVEUNDER.  Once this index is set by InitializeLHAPI, it is never changed.  </LI><P>
<LI><B>ErrorNum:</B> This field gives the error number with which to create error window.  </LI><P>
<LI><B>ErrorHandler:</B> This field gives the routine to be executed by Error functions.  </LI><P>
<LI><B>TopMenuWnd:</B> The window structure for top level menu window, this field gets automatically filled in when menu key is intercepted.  Although LHAPI fills in this window structure when the menu comes up, the Handler field is left alone if it is non-null.  This allows you to subclass the menu by putting in your own menu handler.  </LI><P>
<LI><B>PopMenuWnd:</B> The window structure for popdown menu window, this field is filled in by the menu window class handler when traversing the menus.  Although LHAPI fills in this window structure when the menu comes up, the Handler field is left alone if it is non-null.  This allows you to subclass the menu by putting in your own menu handler.  </LI><P>
<LI><B>CurrentDialog:</B> PLHWINDOW points to the current dialog if one is created.  </LI><P>
<LI><B>DefaultFont:</B> This field gives the ID of the currently defined &quot;default&quot; application font to be used in windows that specify a font type of FONT_DEFAULT.  This field is set by the SetDefaultFont service.  </LI><P>
<LI><B>HelpFkey:</B> The keycode of the application-defined &quot;Help&quot; function-key sequence, this field is used internally by LHAPI and is set via the SetHelpFKey service.  If an application does not explicitly set the help key, the default of &lt;F1&gt; is used.  </LI><P>
</UL><P>
</BODY>
</HTML>